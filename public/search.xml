<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Alpine镜像使用</title>
    <url>/2020/11/01/docker/Alpine%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Alpine镜像使用"><a href="#Alpine镜像使用" class="headerlink" title="Alpine镜像使用"></a>Alpine镜像使用</h2><p>alpine镜像在构建镜像过程中作为基础镜像占比越来越高，下面是alpine镜像中包管理工具apk使用相关示例：</p>
<ol>
<li>apk –help命令查看完整的包管理命令。</li>
<li>apk update：从远程镜像源中更新本地镜像源索引</li>
<li>apk add：安装PACKAGES并自动解决依赖关系，也可以从第三方仓库添加软件包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk add  nmap vim</span><br><span class="line"></span><br><span class="line">apk add --no-cache mysql-client</span><br><span class="line"></span><br><span class="line">apk add docker --update-cache --repository http://mirrors.ustc.edu.cn/alpine/v3.4/main/ --allow-untrusted</span><br></pre></td></tr></table></figure>
安装指定版本软件包:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk add  nmap=7.70-r3</span><br></pre></td></tr></table></figure></li>
<li>apkupgrade 升级软件包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk upgrade （升级所有软件报）</span><br><span class="line">apk add --upgrade nmap（指定软件升级）</span><br></pre></td></tr></table></figure></li>
<li>apk del 卸载并删除PACKAGES<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk del nmap</span><br></pre></td></tr></table></figure></li>
<li>apk search 命令搜索可用软件包，-v 参数输出描述内容，支出通配符，-d 或 –description 参数指定通过软件包描述查询。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk search <span class="comment">#查找所有可用软件包</span></span><br><span class="line">apk search -v <span class="comment">#查找所有可用软件包及其描述内容</span></span><br><span class="line">apk search -v <span class="string">&#x27;acf*&#x27;</span> <span class="comment">#通过软件包名称查找软件包</span></span><br><span class="line">apk search -v -d <span class="string">&#x27;docker&#x27;</span> <span class="comment">#通过描述文件查找特定的软件包</span></span><br></pre></td></tr></table></figure></li>
<li>apk info：列出PACKAGES或镜像源的详细信息<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk info <span class="comment">#列出所有已安装的软件包</span></span><br><span class="line">apk info -a zlib <span class="comment">#显示完整的软件包信息</span></span><br><span class="line">apk info --who-owns /sbin/lbu <span class="comment">#显示指定文件属于的包</span></span><br></pre></td></tr></table></figure></li>
<li>清理akp缓存:rm -rf /var/cache/apk/*</li>
<li>apk使用阿里云的源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories</span><br></pre></td></tr></table></figure></li>
<li>添加用户<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">addgroup -g 1000 -S demo</span><br><span class="line">adduser demo -D -G demo -u 1000</span><br></pre></td></tr></table></figure></li>
<li>alpine内编译安装lrzsz<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk update</span><br><span class="line">apk add wget gcc g++ make</span><br><span class="line">wget https://ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz</span><br><span class="line">tar -xf lrzsz-0.12.20.tar.gz</span><br><span class="line"><span class="built_in">cd</span> lrzsz-0.12.20/</span><br><span class="line">./configure</span><br><span class="line">make; make install</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/bin/lrz /usr/local/bin/rz</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/bin/lsz /usr/local/bin/sz</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>apline</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装elasticsearch</title>
    <url>/2020/11/15/docker/Docker%E5%AE%89%E8%A3%85elasticsearch/</url>
    <content><![CDATA[<h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name elasticsearch  --privileged -p 9200:9200 -p 9300:9300   elasticsearch:6.8.6</span><br></pre></td></tr></table></figure>


<h3 id="安装中文解析插件"><a href="#安装中文解析插件" class="headerlink" title="安装中文解析插件"></a>安装中文解析插件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.8.5/elasticsearch-analysis-ik-6.8.6.zip</span><br><span class="line"></span><br><span class="line">docker cp /Users/denny/Downloads/elasticsearch-analysis-ik-6.8.6.zip elasticsearch:/usr/share/elasticsearch/plugins</span><br><span class="line">elasticsearch-plugin list</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如报错，需要手动创建一个文件（位置与名称看错误信息）</p>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title>docker搭建项目管理系统redmine</title>
    <url>/2020/10/27/docker/docker%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Fredmine/</url>
    <content><![CDATA[<p>Redmine是一个跨平台的项目管理系统，它通过项目的形式把成员、任务、文档、讨论及各种形式的资源组织在一起。这篇文章记录使用Docker搭建Redmine系统的工程。</p>
<p>使用sameersbn/redmine镜像搭建Redmine服务，项目地址为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/sameersbn/docker-redmine</span><br></pre></td></tr></table></figure>

<p>安装指令如下：</p>
<p>（1）启动postgresql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name=postgresql-redmine -d --<span class="built_in">env</span>=<span class="string">&#x27;DB_NAME=redmine_production&#x27;</span> --<span class="built_in">env</span>=<span class="string">&#x27;DB_USER=redmine&#x27;</span> --<span class="built_in">env</span>=<span class="string">&#x27;DB_PASS=password&#x27;</span> sameersbn/postgresql:9.4-12</span><br></pre></td></tr></table></figure>

<p>结果如下：<img src="/2020/10/27/docker/docker%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Fredmine/B401FDDC-A680-45D3-81D0-B790A3A49216.png" alt="B401FDDC-A680-45D3-81D0-B790A3A49216"></p>
<p>（2）启动redmine</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name=redmine -d --<span class="built_in">link</span>=postgresql-redmine:postgresql --publish=10083:80 --<span class="built_in">env</span>=<span class="string">&#x27;REDMINE_PORT=10083&#x27;</span> sameersbn/redmine:3.2.0-4</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="/2020/10/27/docker/docker%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Fredmine/09FC17E6-BA0D-46D9-8A57-BC3386D4DE45.png" alt="09FC17E6-BA0D-46D9-8A57-BC3386D4DE45"></p>
<p>（3）测试Redmine</p>
<p>在Docker指令中，把对外服务的端口映射到了10083，可以通过IP+端口进行访问。</p>
<p>获取IP地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine ip</span><br></pre></td></tr></table></figure>

<p>可以获得我的IP地址是：192.168.99.100</p>
<p>所以可以通过地址：<code>http://192.168.99.100:10083</code>， 进行访问，界面如下：</p>
<p><img src="/2020/10/27/docker/docker%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Fredmine/1F45C6CF-FC4A-4463-87D4-D26771CDD182-5665839.png" alt="1F45C6CF-FC4A-4463-87D4-D26771CDD182-5665839"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>redmine</tag>
      </tags>
  </entry>
  <entry>
    <title>sdk-manager</title>
    <url>/2020/11/17/android/sdk-manager/</url>
    <content><![CDATA[<blockquote>
<p>sdk截图</p>
</blockquote>
<p><img src="/2020/11/17/android/sdk-manager/android.jpg"></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android-sdk</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装rabbitmq</title>
    <url>/2020/10/26/docker/docker%E5%AE%89%E8%A3%85rabbitmq/</url>
    <content><![CDATA[<h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定版本，该版本包含了web控制页面</span></span><br><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure>

<h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一：默认guest 用户，密码也是 guest</span></span><br><span class="line">docker run -d --hostname my-rabbit --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq:management</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：设置用户名和密码</span></span><br><span class="line">docker run -d --hostname my-rabbit --name rabbit -e RABBITMQ_DEFAULT_USER=user -e RABBITMQ_DEFAULT_PASS=password -p 15672:15672 -p 5672:5672 rabbitmq:management</span><br></pre></td></tr></table></figure>

<h3 id="访问UI页面"><a href="#访问UI页面" class="headerlink" title="访问UI页面"></a>访问UI页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost:15672/</span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/26/docker/docker%E5%AE%89%E8%A3%85rabbitmq/1449147-20190720164053275-1039971470.png" alt="1449147-20190720164053275-1039971470"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>基于crontab的mysql数据库备份</title>
    <url>/2020/11/16/crontab/%E5%9F%BA%E4%BA%8Ecrontab%E7%9A%84mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home</span><br><span class="line">mkdir backup</span><br><span class="line">cd backup</span><br></pre></td></tr></table></figure>
<h4 id="创建备份shell脚本"><a href="#创建备份shell脚本" class="headerlink" title="创建备份shell脚本"></a>创建备份shell脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim backup_demoDatabase.sh</span><br></pre></td></tr></table></figure>
<h4 id="备份脚本（未压缩）"><a href="#备份脚本（未压缩）" class="headerlink" title="备份脚本（未压缩）"></a>备份脚本（未压缩）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">mysqldump -uusername -ppassword &gt; demoDatabase &gt; /home/backup/demoDatabase_$(<span class="built_in">date</span> + %Y%m%d_%H%M%S).sql</span><br></pre></td></tr></table></figure>
<h4 id="备份脚本（压缩）"><a href="#备份脚本（压缩）" class="headerlink" title="备份脚本（压缩）"></a>备份脚本（压缩）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uusername -ppaswword &gt; demoDatabase &gt; gzip &gt; /home/backup/demoDatabase_$(date + %Y%m%d_%H%M%S).sql.gz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>username</code> 为用户名<br><code>password</code> 为密码<br><code>demoDatabase</code> 为数据库名</p>
</blockquote>
<h4 id="添加可执行权限"><a href="#添加可执行权限" class="headerlink" title="添加可执行权限"></a>添加可执行权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+x backup_demoDatabase.sh</span><br></pre></td></tr></table></figure>
<h4 id="添加计划任务"><a href="#添加计划任务" class="headerlink" title="添加计划任务"></a>添加计划任务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<h5 id="编辑内容"><a href="#编辑内容" class="headerlink" title="编辑内容"></a>编辑内容</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/1 * * * * /home/backup/backup_demoDatabase</span><br></pre></td></tr></table></figure>
<blockquote>
<p>每一分钟执行一次shell脚本“/home/backup/bkDatabaseName.sh”</p>
</blockquote>
<blockquote>
<p>如果失，败可查看失败日志</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /var/log/cron</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>crontab</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7+nginx+rtmp+ffmpeg搭建流媒体服务器</title>
    <url>/2020/11/10/ffmpeg/centos7+nginx+rtmp+ffmpeg/</url>
    <content><![CDATA[<p><img src="/2020/11/10/ffmpeg/centos7+nginx+rtmp+ffmpeg/09205239-1a57826acfd744918e6737023881a897-20201117153853337.jpg"></p>
<h3 id="1-安装前需要的工具"><a href="#1-安装前需要的工具" class="headerlink" title="1.安装前需要的工具"></a>1.安装前需要的工具</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net-tool 查本地IP</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">wget 下载安装包</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">unzip 解压zip包</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">gcc gcc-c++ perl 编译软件包用</span></span><br><span class="line">yum install -y net-tools wget unzip gcc gcc-c++ perl</span><br></pre></td></tr></table></figure>
<h3 id="2-将将Centos的yum源更换为国内的阿里云源"><a href="#2-将将Centos的yum源更换为国内的阿里云源" class="headerlink" title="2. 将将Centos的yum源更换为国内的阿里云源"></a>2. 将将Centos的yum源更换为国内的阿里云源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">备份yum源</span></span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载阿里源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">清空缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h3 id="3-安装nginx及rtmp"><a href="#3-安装nginx及rtmp" class="headerlink" title="3. 安装nginx及rtmp"></a>3. 安装nginx及rtmp</h3><blockquote>
<p>将当前目录切换的 <code>/home</code> 下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换的homme目录</span></span><br><span class="line">cd /home</span><br></pre></td></tr></table></figure>
</blockquote>
<p>####1. 下载并解压pcre</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载pcre包</span></span><br><span class="line">wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.41.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压pcre包</span></span><br><span class="line">tar -zxvf pcre-8.41.tar.gz</span><br></pre></td></tr></table></figure>

<h4 id="2-下载并解压zlib"><a href="#2-下载并解压zlib" class="headerlink" title="2. 下载并解压zlib"></a>2. 下载并解压zlib</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载zlib包</span></span><br><span class="line">wget http://www.zlib.net/zlib-1.2.11.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压zlib包</span></span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br></pre></td></tr></table></figure>

<h4 id="3-下载并安装openssl"><a href="#3-下载并安装openssl" class="headerlink" title="3.下载并安装openssl"></a>3.下载并安装openssl</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载openssl包</span></span><br><span class="line">wget https://www.openssl.org/source/old/1.0.1/openssl-1.0.1i.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压openssl包</span></span><br><span class="line">tar -zxvf openssl-1.0.1i.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换到openssl里</span></span><br><span class="line">cd openssl-1.0.1i</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">生成配置文件 默认配置</span></span><br><span class="line">./configure </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译程序</span></span><br><span class="line">make </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装程序</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h4 id="4-下载并解压nginx-rtmp-model"><a href="#4-下载并解压nginx-rtmp-model" class="headerlink" title="4. 下载并解压nginx-rtmp-model"></a>4. 下载并解压nginx-rtmp-model</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载rtmp包</span></span><br><span class="line">wget https://github.com/arut/nginx-rtmp-module/archive/master.zip</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压下载包</span></span><br><span class="line">unzip -o master.zip</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改文件夹名</span></span><br><span class="line">mv master nginx-rtmp-module</span><br></pre></td></tr></table></figure>

<h4 id="5-安装nginx"><a href="#5-安装nginx" class="headerlink" title="5.安装nginx"></a>5.安装nginx</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载nginx</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.12.2.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压nignx</span> </span><br><span class="line">tar -zxvf nginx-1.12.2.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换到nginx中</span></span><br><span class="line">cd nginx-1.12.2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">生成配置文件，将上述下载的文件配置到configure中</span></span><br><span class="line">./configure --prefix=/usr/local/nginx --with-pcre=/home/pcre-8.41 --with-zlib=/home/zlib-1.2.11 --with-openssl=/home/openssl-1.0.1i --add-module=/home/nginx-rtmp-module  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译程序</span></span><br><span class="line">make</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装程序</span></span><br><span class="line">make install</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看nginx模块</span></span><br><span class="line">nginx -V</span><br></pre></td></tr></table></figure>

<h3 id="4-安装ffmpeg"><a href="#4-安装ffmpeg" class="headerlink" title="4. 安装ffmpeg"></a>4. 安装ffmpeg</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装epel包</span></span><br><span class="line">yum install -y epel-release </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">导入签名</span></span><br><span class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">导入签名</span></span><br><span class="line">rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">升级软件包</span></span><br><span class="line">rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新软件包</span></span><br><span class="line">yum update -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装ffmpeg</span></span><br><span class="line">yum install -y ffmpeg</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查版本</span></span><br><span class="line">ffmpeg -version</span><br></pre></td></tr></table></figure>

<h3 id="5-修改配置运行服务"><a href="#5-修改配置运行服务" class="headerlink" title="5. 修改配置运行服务"></a>5. 修改配置运行服务</h3><h4 id="1-修改nginx配置"><a href="#1-修改nginx配置" class="headerlink" title="1.修改nginx配置"></a>1.修改nginx配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>

<p>修改之后的配置</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#工作进程</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="comment">#事件配置</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#RTMP配置</span></span><br><span class="line"><span class="section">rtmp</span> &#123;  </span><br><span class="line">    <span class="section">server</span> &#123;  </span><br><span class="line">        <span class="comment">#监听端口</span></span><br><span class="line">    	<span class="attribute">listen</span> <span class="number">1935</span>;  </span><br><span class="line">  		<span class="comment">#</span></span><br><span class="line">        <span class="attribute">application</span> myapp &#123;  </span><br><span class="line">            <span class="attribute">live</span> <span class="literal">on</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    	<span class="comment">#hls配置</span></span><br><span class="line">        <span class="attribute">application</span> hls &#123;  </span><br><span class="line">            <span class="attribute">live</span> <span class="literal">on</span>;  </span><br><span class="line">            <span class="attribute">hls</span> <span class="literal">on</span>;  </span><br><span class="line">            <span class="attribute">hls_path</span> /tmp/hls;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">#配置hls</span></span><br><span class="line">		<span class="section">location</span> /hls &#123;  </span><br><span class="line">            <span class="section">types</span> &#123;  </span><br><span class="line">                application/vnd.apple.<span class="attribute">mpegurl</span> m3u8;  </span><br><span class="line">                video/<span class="attribute">mp2t</span> ts;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="attribute">root</span> /tmp;  </span><br><span class="line">            <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache;  </span><br><span class="line">		&#125;  </span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-执行nginx"><a href="#2-执行nginx" class="headerlink" title="2.执行nginx"></a>2.执行nginx</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>


<h4 id="3-打开防火墙"><a href="#3-打开防火墙" class="headerlink" title="3. 打开防火墙"></a>3. 打开防火墙</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h4 id="4-测试功能"><a href="#4-测试功能" class="headerlink" title="4.测试功能"></a>4.测试功能</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看IP</span></span><br><span class="line">ifconfig </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在home下上传一个test.mp4视频</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">推送rtmp流</span></span><br><span class="line">ffmpeg -re -i &quot;/home/test.mp4&quot; -vcodec libx264 -vprofile baseline -acodec aac  -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://&#123;IP&#125;:1935/myapp/test1 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">推送hls流</span></span><br><span class="line">ffmpeg -re -i &quot;/home/test.mp4&quot; -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://&#123;IP&#125;:1935/hls/test2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果测试rmtp 下载一个VLC测试</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果是hls则写个HTML测试</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/hls.js/latest/hls.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span>(<span class="title class_">Hls</span>.<span class="title function_">isSupported</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;video&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> hls = <span class="keyword">new</span> <span class="title class_">Hls</span>();</span></span><br><span class="line"><span class="language-javascript">    hls.<span class="title function_">loadSource</span>(<span class="string">&#x27;http://&#123;IP&#125;/hls/test2.m3u8&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    hls.<span class="title function_">attachMedia</span>(video);</span></span><br><span class="line"><span class="language-javascript">    hls.<span class="title function_">on</span>(<span class="title class_">Hls</span>.<span class="property">Events</span>.<span class="property">MANIFEST_PARSED</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      video.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>





<hr>
]]></content>
      <categories>
        <category>ffmpeg</category>
      </categories>
      <tags>
        <tag>rtmp</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg安装</title>
    <url>/2020/11/08/ffmpeg/ffmpeg%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="1-升级系统"><a href="#1-升级系统" class="headerlink" title="1.升级系统"></a>1.升级系统</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install epel-release -y</span><br><span class="line">sudo yum update -y</span><br><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure>

<h3 id="2-安装Nux-Dextop-Yum-源"><a href="#2-安装Nux-Dextop-Yum-源" class="headerlink" title="2.安装Nux Dextop Yum 源"></a>2.安装Nux Dextop Yum 源</h3><blockquote>
<p>由于CentOS没有官方FFmpeg rpm软件包。但是，我们可以使用第三方YUM源（Nux Dextop）完成此工作。</p>
</blockquote>
<h5 id="1-CentOS-7"><a href="#1-CentOS-7" class="headerlink" title="1) CentOS 7"></a>1) CentOS 7</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class="line">sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br></pre></td></tr></table></figure>

<h5 id="2-CentOS-6"><a href="#2-CentOS-6" class="headerlink" title="2) CentOS 6"></a>2) CentOS 6</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class="line">sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el6/x86_64/nux-dextop-release-0-2.el6.nux.noarch.rpm</span><br></pre></td></tr></table></figure>
<h3 id="3-安装FFmpeg-和-FFmpeg开发包"><a href="#3-安装FFmpeg-和-FFmpeg开发包" class="headerlink" title="3.安装FFmpeg 和 FFmpeg开发包"></a>3.安装FFmpeg 和 FFmpeg开发包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install ffmpeg ffmpeg-devel -y</span><br></pre></td></tr></table></figure>

<h3 id="4-测试是否安装成功"><a href="#4-测试是否安装成功" class="headerlink" title="4.测试是否安装成功"></a>4.测试是否安装成功</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg</span><br></pre></td></tr></table></figure>
<h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h3><blockquote>
<p>如果你想了解更多关于FFmpeg使用方面的资料，可以输入：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -h</span><br></pre></td></tr></table></figure>

<blockquote>
<p>例子：<br>使用FFmpeg将mp3转为ogg</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i MLKDream_64kb.mp3 -c:a libvorbis -q:a 4 MLKDream_64kb.ogg</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用FFmpeg将flv转为mp4</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i beeen.flv -y -vcodec copy -acodec copy beeen.mp4</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ffmpeg</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装gitlab</title>
    <url>/2020/11/11/docker/Docker%E5%AE%89%E8%A3%85gitlab/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install docker.io </span><br></pre></td></tr></table></figure>
<h4 id="添加加速器"><a href="#添加加速器" class="headerlink" title="添加加速器"></a>添加加速器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure>
<h4 id="创建初始目录"><a href="#创建初始目录" class="headerlink" title="创建初始目录"></a>创建初始目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -m 755 -p /srv/gitlab60/config /srv/gitlab60/logs /srv/gitlab60/data</span><br></pre></td></tr></table></figure>

<h4 id="创建并运行容器"><a href="#创建并运行容器" class="headerlink" title="创建并运行容器"></a>创建并运行容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run -d -h 10.0.0.252  -p 6080:80 -p 60443:443 -p 6022:22 --name gitlab60 --restart always -v /srv/gitlab60/config:/etc/gitlab -v /srv/gitlab60/logs:/var/log/gitlab -v /srv/gitlab60/data:/var/opt/gitlab gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>
<h4 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>run</td>
<td>启动容器</td>
</tr>
<tr>
<td>-d</td>
<td>后台启动</td>
</tr>
<tr>
<td>-h 10.0.0.252</td>
<td>设置容器主机地址</td>
</tr>
<tr>
<td>-p 6080:80 -p 60443:443 -p 6022:22</td>
<td>端口映射 宿主端口：容器端口</td>
</tr>
<tr>
<td>–name gitlab60</td>
<td>容器名称</td>
</tr>
<tr>
<td>restart always</td>
<td>停止重启</td>
</tr>
<tr>
<td>-v /srv/gitlab60/config:/etc/gitlab -v /srv/gitlab60/logs:/var/log/gitlab -v /srv/gitlab60/data:/var/opt/gitlab</td>
<td>目录挂载 宿主目录：容器目录</td>
</tr>
<tr>
<td>gitlab/gitlab-ce:latest</td>
<td>容器名称：版本号</td>
</tr>
</tbody></table>
<blockquote>
<p>需要等待几分钟进行初始化，此时可以查看gitlab日志</p>
</blockquote>
<h4 id="修改gitlab配置文件"><a href="#修改gitlab配置文件" class="headerlink" title="修改gitlab配置文件"></a>修改gitlab配置文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker exec -it gitlab60 vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>exec</td>
<td>进入容器</td>
</tr>
<tr>
<td>-it</td>
<td>显示容器信息</td>
</tr>
<tr>
<td>gitlab60</td>
<td>容器名称</td>
</tr>
</tbody></table>
<h4 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>
<h4 id="查看gitlab日志"><a href="#查看gitlab日志" class="headerlink" title="查看gitlab日志"></a>查看gitlab日志</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker logs -f gitlab60</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>logs</td>
<td>容器日志</td>
</tr>
<tr>
<td>-f</td>
<td>动态显示</td>
</tr>
<tr>
<td>gitlab60</td>
<td>容器名称</td>
</tr>
</tbody></table>
<h4 id="进入gitlab容器"><a href="#进入gitlab容器" class="headerlink" title="进入gitlab容器"></a>进入gitlab容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker exec -it gitlab60 /bin/bash</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>exec</td>
<td>进入容器</td>
</tr>
<tr>
<td>-it</td>
<td>显示容器信息</td>
</tr>
<tr>
<td>gitlab60</td>
<td>容器名称</td>
</tr>
<tr>
<td>/bin/bash</td>
<td>进入bash</td>
</tr>
</tbody></table>
<h4 id="进入容器后可以执行一下命令"><a href="#进入容器后可以执行一下命令" class="headerlink" title="进入容器后可以执行一下命令"></a>进入容器后可以执行一下命令</h4><p><strong>启动容器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl start</span><br></pre></td></tr></table></figure>
<p><strong>停止容器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl stop</span><br></pre></td></tr></table></figure>
<p><strong>重启容器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>CURL超时设置</title>
    <url>/2020/11/08/php/CURL%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>CURLOPT_CONNECTTIMEOUT 用来告诉 PHP 在成功连接服务器前等待多久（连接成功之后就会开始缓冲输出），这个参数是为了应对目标服务器的过载，下线，或者崩溃等可能状况。</p>
</blockquote>
<blockquote>
<p>CURLOPT_TIMEOUT 用来告诉成功 PHP 从服务器接收缓冲完成前需要等待多长时间，如果目标是个巨大的文件，生成内容速度过慢或者链路速度过慢，这个参数就会很有用。<br>PS 爬去的时候只加了</p>
</blockquote>
<blockquote>
<p>CURLOPT_CONNECTTIMEOUT 经常会卡死<br>使用 cURL 下载 MP3 文件是一个对开发人员来说不错的例子，CURLOPT_CONNECTTIMEOUT 可以设置为10秒，标识如果服务器10秒内没有响应，脚本就会断开连接，CURLOPT_TIMEOUT 可以设置为100秒，如果MP3文件100秒内没有下载完成，脚本将会断开连接。</p>
</blockquote>
<blockquote>
<p>需要注意的是：CURLOPT_TIMEOUT 默认为0，意思是永远不会断开链接。所以不设置的话，可能因为链接太慢，会把 HTTP 资源用完。</p>
</blockquote>
<blockquote>
<p>在 WordPress 中，wp_http 类，这两个值是一样的，默认是设置为 5 秒。</p>
</blockquote>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>crontab定时任务不执行的原因</title>
    <url>/2020/11/12/crontab/crontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%B8%8D%E6%89%A7%E8%A1%8C%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<h3 id="1-crond服务未启动"><a href="#1-crond服务未启动" class="headerlink" title="1 crond服务未启动"></a>1 crond服务未启动</h3><blockquote>
<p>crontab不是Linux内核的功能，而是依赖一个crond服务，这个服务可以启动当然也可以停止。如果停止了就无法执行任何定时任务了，解决的方法是打开它:</p>
</blockquote>
<p><code>crond</code>或<code>service crond start</code></p>
<blockquote>
<p>如果提示crond命令不存在，可能被误删除了，CentOS下可以通过这个命令重新安装：</p>
</blockquote>
<p><code>yum -y install crontabs</code></p>
<h3 id="2-权限问题"><a href="#2-权限问题" class="headerlink" title="2 权限问题"></a>2 权限问题</h3><blockquote>
<p>比如：脚本没有x执行权限，解决方法：<br>增加执行权限，或者用bash abc.sh的方法执行<br>也有可能crontab任务所属的用户对某个目录没有写权限，也会失败</p>
</blockquote>
<h3 id="3-路径问题"><a href="#3-路径问题" class="headerlink" title="3 路径问题"></a>3 路径问题</h3><blockquote>
<p>有的命令在shell中执行正常，但是在crontab执行却总是失败。有可能是因为crontab使用的sh未正确识别路径，比如：以root身份登录shell后执行一个/root/test.sh，只要执行</p>
</blockquote>
<p><code>./test.sh</code></p>
<blockquote>
<p>就可以了。但是在crontab中，就会找不到这个脚本，比如写完整：</p>
</blockquote>
<p><code>/root/test.sh</code></p>
<h3 id="4-时差问题"><a href="#4-时差问题" class="headerlink" title="4 时差问题"></a>4 时差问题</h3><blockquote>
<p>因为服务器与客户端时差问题，所以crontab的时间以服务器时间为准。<br>时差这个问题还真是搞人，这个我亲身体验了，现象如下：</p>
</blockquote>
<p>(1) 我设置了一个定时脚本，用date命令观察服务器的时间到了脚本执行的时间点，发现没有执行</p>
<p>(2) 但是我把脚本设置成每分钟执行一次，就是OK的</p>
<blockquote>
<p>见鬼了，服务器时间是对的啊？莫非是要加个什么时区？于是把脚本的时间减10或者12或者8个小时都尝试了下，发现都不行。<br>但是很明显是时间不一致导致的不执行。</p>
</blockquote>
<h3 id="5-变量问题"><a href="#5-变量问题" class="headerlink" title="5 变量问题"></a>5 变量问题</h3><blockquote>
<p>有时候命令中含有变量，但crontab执行时却没有，也会造成执行失败。</p>
</blockquote>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ffmpeg修改mp3的tag</title>
    <url>/2020/11/05/ffmpeg/%E4%BD%BF%E7%94%A8ffmpeg%E4%BF%AE%E6%94%B9mp3%E7%9A%84tag/</url>
    <content><![CDATA[<h1 id="使用ffmpeg修改mp3的tag"><a href="#使用ffmpeg修改mp3的tag" class="headerlink" title="使用ffmpeg修改mp3的tag"></a>使用ffmpeg修改mp3的tag</h1><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a><strong>基本用法</strong></h3><blockquote>
<p>使用 -metadata 后面跟 = 就可以修改相应的tag了。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i track12.mp3 -metadata album=&quot;专辑&quot; 音乐.mp3</span><br></pre></td></tr></table></figure>

<blockquote>
<p>重复使用-metadata加 key/value 修改多个tag</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i track12.mp3 -metadata album=&quot;专辑&quot; -metadata artist=&quot;作家&quot; 音乐.mp3</span><br></pre></td></tr></table></figure>

<blockquote>
<p>把value置空来删除某个标签，比如删掉 genre 标签</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i track12.mp3 -metadata genre=&quot;&quot; 音乐.mp3</span><br></pre></td></tr></table></figure>

<blockquote>
<p>标准tag</p>
</blockquote>
<table>
<thead>
<tr>
<th>Windows</th>
<th>iTunes(Info tab)</th>
<th>id3v2.3</th>
<th>ffmpeg key</th>
<th>ffmpeg 示例</th>
</tr>
</thead>
<tbody><tr>
<td>Title</td>
<td>Title</td>
<td>TIT2</td>
<td>title</td>
<td>-metadata title=”海阔天空”</td>
</tr>
<tr>
<td>Subtitle</td>
<td>Description(Video tab)</td>
<td>TIT3</td>
<td>TIT3</td>
<td>-metadata TIT3=”beyond 20周年纪念版”</td>
</tr>
<tr>
<td>Rating</td>
<td>n/a</td>
<td>n/a</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr>
<td>Comments</td>
<td>Comments</td>
<td>COMM</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr>
<td>Contributing artists</td>
<td>Artist</td>
<td>TPE1</td>
<td>artist</td>
<td>-metadata artist=”黄家驹”</td>
</tr>
<tr>
<td>Album artist</td>
<td>Album artist</td>
<td>TPE2</td>
<td>album_artist</td>
<td>-metadata album_artist=”Josh Groban”</td>
</tr>
<tr>
<td>Album</td>
<td>Album</td>
<td>TALB</td>
<td>album</td>
<td>-metadata album=”Closer”</td>
</tr>
<tr>
<td>Year</td>
<td>Year</td>
<td>TYER</td>
<td>date</td>
<td>-metadata date=”2009”</td>
</tr>
<tr>
<td>#</td>
<td>Track Number</td>
<td>TRCK</td>
<td>track</td>
<td>-metadata track=”3/12”(12首歌中的第3个)</td>
</tr>
<tr>
<td>Genre</td>
<td>Genre</td>
<td>TCON</td>
<td>genre</td>
<td>-metadata genre=”Vocal”</td>
</tr>
<tr>
<td>Publisher</td>
<td>n/a</td>
<td>TPUB</td>
<td>publisher</td>
<td>-metadata publisher=”Heaven Church”</td>
</tr>
<tr>
<td>Encoded by</td>
<td>n/a</td>
<td>TENC</td>
<td>encoded_by</td>
<td>-metadata encoded_by=”Joshua”</td>
</tr>
<tr>
<td>Aythor URL</td>
<td>n/a</td>
<td>WOAR</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr>
<td>CopyRight(不可编辑)</td>
<td>n/a</td>
<td>TCOP</td>
<td>copyright</td>
<td>-metadata copyright=”℗ lqsoft”</td>
</tr>
<tr>
<td>Composers</td>
<td>n/a</td>
<td>TCOM</td>
<td>composer</td>
<td>-metadata composer=”Joshua”</td>
</tr>
<tr>
<td>Conductors</td>
<td>n/a</td>
<td>TPE3</td>
<td>performer</td>
<td>-metadata performer=”Joshua”</td>
</tr>
<tr>
<td>Group description</td>
<td>Grouping</td>
<td>TIT1</td>
<td>TIT1</td>
<td>-metadata TIT1=”The Classics”</td>
</tr>
<tr>
<td>Mood</td>
<td>n/a</td>
<td>n/a</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr>
<td>Part of set</td>
<td>Disc Number</td>
<td>TPOS</td>
<td>disc</td>
<td>-metadata disc=”1/2”</td>
</tr>
<tr>
<td>Initial key</td>
<td>n/a</td>
<td>TKEY</td>
<td>TKEY</td>
<td>-metadata TKEY=”G”</td>
</tr>
<tr>
<td>Beats-per-minute</td>
<td>BOM</td>
<td>TBPM</td>
<td>TBPM</td>
<td>-metadata TBPM=”120”</td>
</tr>
<tr>
<td>Part of a compilation</td>
<td>Part of a compilation</td>
<td>TCMP</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>TLAN</td>
<td>language</td>
<td>-metadata language=”eng”</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>TSSE</td>
<td>encoder</td>
<td>-metadata encoder=”iTunes v10”</td>
</tr>
</tbody></table>
<h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><blockquote>
<p>清除音乐文件所有的tag信息(-map_metadata -1可清除所有metadata信息)：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i track12.mp3 -map_metadata -1 out.mp3</span><br></pre></td></tr></table></figure>

<blockquote>
<p>把音乐文件的metadata信息导出到文件里：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i track12.mp3 -f ffmetadata metadata.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可对输出的 metadata.txt 进行修改，完事后重新写入到文件里。ffmetadata文件的格式如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;FFMETADATA1</span><br><span class="line"> title=You Raise Me Up</span><br><span class="line"> ;逗号可以添加注释</span><br><span class="line"> artist=Josh Groban</span><br><span class="line"></span><br><span class="line"> [CHAPTER]</span><br><span class="line"> TIMEBASE=1/1000</span><br><span class="line"> START=0</span><br><span class="line"> #chapter ends at 0:01:00</span><br><span class="line"> END=60000</span><br><span class="line"> title=chapter \#1</span><br><span class="line"> [STREAM]</span><br><span class="line"> title=多行\</span><br><span class="line"> 多行</span><br></pre></td></tr></table></figure>

<blockquote>
<p>把 metadata.txt 文件写入音乐文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i track12.mp3 -i metadata.txt -map_metadata 1 -c:a copy -id3v2_version 3 -write_id3v1 1 out.mp3</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-map_metadata 1：代表使用输入顺序为1的文件，作为metadata，也就是 metadata.txt，这个数字和 -i的重复的次数有关，从0开始计数。</p>
<p>-c:a codec audio的意思，这里用的是 copy，不写也行，默认值就是。</p>
<p>-id3v2_version 3和-write_id3v1 1是为了对Windows兼容加上的，否则在Windows上会出现问题。</p>
</blockquote>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><blockquote>
<p>除了ffmpeg还有诸多的工具，lame还可以向音乐文件里插入图片：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lame --ai &lt;path/to/*.[jpg|png|gif]&gt; &lt;*.mp3&gt; [out.mp3]</span><br></pre></td></tr></table></figure>

<p>参考</p>
<blockquote>
<p><a href="http://jonhall.info/how_to/create_id3_tags_using_ffmpeg">http://jonhall.info/how_to/create_id3_tags_using_ffmpeg</a></p>
</blockquote>
]]></content>
      <categories>
        <category>ffmpeg</category>
      </categories>
      <tags>
        <tag>mp3</tag>
      </tags>
  </entry>
  <entry>
    <title>memory</title>
    <url>/2020/11/13/php/composer%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024&amp;&amp;sudo /sbin/mkswap /var/swap.1&amp;&amp;sudo /sbin/swapon /var/swap.1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>composer</tag>
      </tags>
  </entry>
  <entry>
    <title>hyperfcms登录后显示登录失败解决</title>
    <url>/2020/10/24/php/hyperfcms%E7%99%BB%E5%BD%95%E5%90%8E%E6%98%BE%E7%A4%BA%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>hyperfcms登录后显示登录失败，是因为配置引起的问题，需要修改配置。</p>
<p>打开<code>hyperfcms/cms_php/config/autoload/server.php</code></p>
<p>将 <code>static_handler_locations</code>下面注释 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// &#x27;static_handler_locations&#x27; =&gt; [&#x27;/&#x27;],</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>hyperfcms</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP运行流程</title>
    <url>/2020/11/03/php/PHP%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>命名空间用一句话说，就是：把 类、函数、变量 等放到逻辑子文件夹中去，以避免命名冲突。<br>PSR-4 命名空间规范约定了 PHP 类的命名空间应该和实际在文件系统中的位置一致，而现实中绝大多数 PHP 框架为了方便都采纳了这条规范，最明显的就是 Laravel 4 到 5 的转变。在这种情况下，我发现不少新手又迷茫了，错误地理解了我在上文中的阐述的“路径”的概念。基于此我要简单讲述一下 PHP 运行的基本流程，我相信看完你们就不会再有上面的误解了。</p>
</blockquote>
<h3 id="PHP-运行流程"><a href="#PHP-运行流程" class="headerlink" title="PHP 运行流程"></a>PHP 运行流程</h3><p>在一个典型的 Apache +  mod_php 架构的 PHP 运行环境中，一个 PHP 网站是这样运行的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.    Apache 收到用户的 HTTP 请求</span><br><span class="line">2.    这个请求是以 .php 结尾或者是一个不存在的路径（.htaccess 会将其转发到 index.php）</span><br><span class="line">3.    Apache 的 mod_php 会启动一个新的 PHP 进程（PHP 解释器），读取 HTTP 请求的 URL 中的那个 .php 文件或者 index.php</span><br><span class="line">4.    被读取进 PHP 解释器的字符串被按照 PHP 的语法进行解析。为了方便理解，我们将这些经过解析的字符串所生成的 context（上下文）命名为 Matrix</span><br><span class="line">5.    然后 PHP 解释器会根据从 Matrix 中解析出的特定 PHP 语句（如 require）载入其他 PHP 文件，并将其内容以字符串的形式加入 Matrix</span><br><span class="line">6.    最终 Matrix 变成一个数万行代码的巨型上下文（为了便于理解可以想象成巨长的代码文件字符串），PHP 解释器会按照 PHP 语法执行 Matrix，进行数据库连接、网络请求、文件读写等操作</span><br><span class="line">7.    每一次的 echo 都会被写入到输出缓冲区，最终这个巨长的代码字符串被执行完毕，PHP 进程退出内存</span><br><span class="line">8.    缓冲区中就是要发给用户的 HTTP response，其实就是一堆字符串，只不过它遵守 HTML 规范，可以被浏览器解析。这一堆字符串被 Apache 发送回用户的浏览器，浏览器渲染，用户看到内容</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>runtime</tag>
      </tags>
  </entry>
  <entry>
    <title>UML案例</title>
    <url>/2020/11/04/uml/UML%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p><img src="/2020/11/04/uml/UML%E6%A1%88%E4%BE%8B/UML%E6%A1%88%E4%BE%8B.png"></p>
]]></content>
      <categories>
        <category>uml</category>
      </categories>
  </entry>
  <entry>
    <title>brew切换为国内源</title>
    <url>/2020/11/18/os/brew%E5%88%87%E6%8D%A2%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/</url>
    <content><![CDATA[<h1 id="brew-切换为国内源"><a href="#brew-切换为国内源" class="headerlink" title="brew 切换为国内源"></a>brew 切换为国内源</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Homebrew 是一款自由及开放源代码的软件包管理系统，用以简化 macOS 和 linux 系统上的软件安装过程。它拥有安装、卸载、更新、查看、搜索等很多实用的功能，通过简单的一条指令，就可以实现包管理，十分方便快捷。</p>
</blockquote>
<p>Homebrew 主要有四个部分组成: <code>brew</code>、<code>homebrew-core</code> 、<code>homebrew-bottles</code>、<code>homebrew-cask</code>。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>brew</td>
<td>Homebrew 源代码仓库</td>
</tr>
<tr>
<td>homebrew-core</td>
<td>Homebrew 核心软件仓库</td>
</tr>
<tr>
<td>homebrew-bottles</td>
<td>Homebrew 预编译二进制软件包</td>
</tr>
<tr>
<td>homebrew-cask</td>
<td>提供 macOS 应用和大型二进制文件</td>
</tr>
</tbody></table>
<h3 id="替换为阿里源"><a href="#替换为阿里源" class="headerlink" title="替换为阿里源"></a>替换为阿里源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 brew.git 当前源</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> &amp;&amp; git remote -v</span><br><span class="line">origin    https://github.com/Homebrew/brew.git (fetch)</span><br><span class="line">origin    https://github.com/Homebrew/brew.git (push)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 homebrew-core.git 当前源</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> &amp;&amp; git remote -v</span><br><span class="line">origin    https://github.com/Homebrew/homebrew-core.git (fetch)</span><br><span class="line">origin    https://github.com/Homebrew/homebrew-core.git (push)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 brew.git 为阿里源</span></span><br><span class="line">$ git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 homebrew-core.git 为阿里源</span></span><br><span class="line">$ git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># zsh 替换 brew bintray 镜像</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># bash 替换 brew bintray 镜像</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新源</span></span><br><span class="line">$ brew update</span><br></pre></td></tr></table></figure>

<h3 id="替换为清华源"><a href="#替换为清华源" class="headerlink" title="替换为清华源"></a>替换为清华源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换各个源</span></span><br><span class="line">$ git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line">$ git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line">$ git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># zsh 替换 brew bintray 镜像</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># bash 替换 brew bintray 镜像</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新源</span></span><br><span class="line">$ brew update</span><br></pre></td></tr></table></figure>

<h3 id="替换为中科大源"><a href="#替换为中科大源" class="headerlink" title="替换为中科大源"></a>替换为中科大源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换各个源</span></span><br><span class="line">$ git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line">$ git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line">$ git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># zsh 替换 brew bintray 镜像</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># bash 替换 brew bintray 镜像</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新源</span></span><br><span class="line">$ brew update</span><br></pre></td></tr></table></figure>

<h3 id="重置为官方源"><a href="#重置为官方源" class="headerlink" title="重置为官方源"></a>重置为官方源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重置 brew.git 为官方源</span></span><br><span class="line">$ git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置 homebrew-core.git 为官方源</span></span><br><span class="line">$ git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置 homebrew-cask.git 为官方源</span></span><br><span class="line">$ git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-cask</span><br><span class="line"></span><br><span class="line"><span class="comment"># zsh 注释掉 HOMEBREW_BOTTLE_DOMAIN 配置</span></span><br><span class="line">$ vi ~/.zshrc</span><br><span class="line"><span class="comment"># export HOMEBREW_BOTTLE_DOMAIN=xxxxxxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bash 注释掉 HOMEBREW_BOTTLE_DOMAIN 配置</span></span><br><span class="line">$ vi ~/.bash_profile</span><br><span class="line"><span class="comment"># export HOMEBREW_BOTTLE_DOMAIN=xxxxxxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新源</span></span><br><span class="line">$ brew update</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核调优</title>
    <url>/2020/10/23/os/Linux%E5%86%85%E6%A0%B8%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<p>为了让系统能够支持更大的并发 优化linux内核也是<strong>重中之重</strong>，以下优化<strong>每一项</strong>都非常非常重要，请务必按逐一完成。</p>
<p>打开文件 <code>/etc/sysctl.conf</code>，增加以下设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#该参数设置系统的TIME_WAIT的数量，如果超过默认值则会被立即清除</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 20000</span><br><span class="line"><span class="comment">#定义了系统中每一个端口最大的监听队列的长度，这是个全局的参数</span></span><br><span class="line">net.core.somaxconn = 65535</span><br><span class="line"><span class="comment">#对于还未获得对方确认的连接请求，可保存在队列中的最大数目</span></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line"><span class="comment">#在每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目</span></span><br><span class="line">net.core.netdev_max_backlog= 30000</span><br><span class="line"><span class="comment">#能够更快地回收TIME-WAIT套接字。此选项会导致处于NAT网络的客户端超时，建议为0</span></span><br><span class="line">net.ipv4.tcp_tw_recycle = 0</span><br><span class="line"><span class="comment">#系统所有进程一共可以打开的文件数量</span></span><br><span class="line">fs.file-max = 6815744</span><br><span class="line"><span class="comment">#防火墙跟踪表的大小。注意：如果防火墙没开则会提示error: &quot;[net.netfilter.nf_conntrack_max](http://net.netfilter.nf_conntrack_max/)&quot; is an unknown key，忽略即可</span></span><br><span class="line">net.netfilter.nf_conntrack_max = 2621440</span><br></pre></td></tr></table></figure>
<p>运行 <code>sysctl -p</code>即可生效。</p>
<p><strong>说明：</strong></p>
<p><code>/etc/sysctl.conf </code>可设置的选项很多，其它选项可以根据自己的环境需要进行设置</p>
<h2 id="打开文件数"><a href="#打开文件数" class="headerlink" title="打开文件数"></a><strong>打开文件数</strong></h2><p>设置系统打开文件数设置，解决高并发下 too many open files 问题。此选项直接影响单个进程容纳的客户端连接数。</p>
<p>Soft open files 是Linux系统参数，影响系统单个进程能够打开最大的文件句柄数量，这个值会影响到长连接应用如聊天中单个进程能够维持的用户连接数， 运行ulimit -n能看到这个参数值，如果是1024，就是代表单个进程只能同时最多只能维持1024甚至更少（因为有其它文件的句柄被打开）。如果开启4个进程维持用户连接，那么整个应用能够同时维持的连接数不会超过4*1024个，也就是说最多只能支持4x1024个用户在线可以增大这个设置以便服务能够维持更多的TCP连接。</p>
<p>Soft open files 修改方法：</p>
<p>（1）<code>ulimit -HSn 102400</code></p>
<p>这只是在当前终端有效，退出之后，open files 又变为默认值。</p>
<p>（2）在/etc/profile文件末尾添加一行<code>ulimit -HSn 102400</code>，这样每次登录终端时，都会自动执行<code>/etc/profile</code>。</p>
<p>（3）令修改open files的数值永久生效，则必须修改配置文件：<code>/etc/security/limits.conf</code>. 在这个文件后加上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\* soft nofile 1024000</span><br><span class="line">\* hard nofile 1024000</span><br><span class="line">root soft nofile 1024000</span><br><span class="line">root hard nofile 1024000</span><br></pre></td></tr></table></figure>
<p>这种方法需要重启机器才能生效。</p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>IT术语解读</title>
    <url>/2020/10/28/note/IT%E6%9C%AF%E8%AF%AD%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<h3 id="冷备份"><a href="#冷备份" class="headerlink" title="冷备份"></a>冷备份</h3><p>假设你是个妹子，你有一位男朋友，于此同时你和另外一位男生暧昧不清，比朋友好，又不是恋人。你随时可以甩了现任男友，另外一位马上就能补上。这是冷备份。</p>
<h3 id="双机热备份"><a href="#双机热备份" class="headerlink" title="双机热备份"></a>双机热备份</h3><p>假设你是个妹子，同时和两位男性在交往，两位都是你男朋友。并且他们还互不干涉，独立运行。这就是双机热备份。</p>
<h3 id="异地容灾备份"><a href="#异地容灾备份" class="headerlink" title="异地容灾备份"></a>异地容灾备份</h3><p>假设你是个妹子，不安于男朋友给你的安全感。在遥远的男友未知的地方，和一位男生保持着联系，你告诉他你没有男朋友，你现在处于纠结期，一旦你和你男朋友分开了，你马上可以把自己感情转移到异地男人那里去。这是异地容灾备份。</p>
<h3 id="云备份"><a href="#云备份" class="headerlink" title="云备份"></a>云备份</h3><p>假设你是个妹子，有一位男朋友，你又付了钱给一家婚姻介绍所，让他帮你留意好的资源，一旦你和你这位男朋友分开，婚姻介绍所马上给你安排资源，你感情不间断运行，这是云备份。。。。</p>
<h3 id="灾难演练"><a href="#灾难演练" class="headerlink" title="灾难演练"></a>灾难演练</h3><p>假设你是个妹子，你怀疑男朋友对你的忠诚，在某宝购买了一个测试忠诚度的服务。这是灾难演练。友情提醒，在没有备份的情况下，切忌进行灾难演练，说不好会让你数据血本无归。</p>
<h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>假设你是个妹子，你和男友异地恋，你每天晚上都打电话查岗，问他还爱不爱你了，这叫ping。</p>
<h3 id="TraceRoute"><a href="#TraceRoute" class="headerlink" title="TraceRoute"></a>TraceRoute</h3><p>假设你是个妹子，你的男友经常玩失踪，所以你希望时刻掌握他的行踪，你先打电话给他的好基友A，A说好基友B知道，B说好基友C知道，C说好基友D知道，D说你男朋友正在网吧打游戏，你终于知道了男友在哪儿，这叫TraceRoute。</p>
<h3 id="心跳监测"><a href="#心跳监测" class="headerlink" title="心跳监测"></a>心跳监测</h3><p>假设你是个妹子，你的男友沉迷游戏经常不接电话无故宕机，所以当你们约好下午逛街以后你要时不时的打个电话询问，看看他是不是还能正常提供服务，这叫心跳监测。</p>
<h3 id="故障切换"><a href="#故障切换" class="headerlink" title="故障切换"></a>故障切换</h3><p>假设你是个妹子，你想去逛街而你的男友A在打游戏不接电话，于是乎你把逛街的请求发给了替补男友B，从而保障服务不间断运行，这叫故障切换。</p>
<h3 id="主从配置"><a href="#主从配置" class="headerlink" title="主从配置"></a>主从配置</h3><p>假设你是个妹子，你有很多需要男朋友完成的事情，于是乎你跟A逛街旅游吃饭不可描述，而B只能陪你逛街，不能拥有全部男朋友的权利，这叫主从配置 master-slave。</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>假设你是个妹子，你败家太厉害，以至于你的男友根本吃不消，于是呼你找了两个男朋友，一三五单号，二四六双号限行，从而减少一个男朋友所面临的压力，这叫负载均衡。</p>
<h3 id="集群LVS"><a href="#集群LVS" class="headerlink" title="集群LVS"></a>集群LVS</h3><p>假设你是个妹子并且有多个男朋友，配合心跳检测与故障切换和负载均衡将会达到极致的体验，这叫集群LVS，注意，当需求单机可以处理的情况下不建议启用集群，会造成大量资源闲置，提高维护成本。</p>
<h3 id="多集群横向扩容"><a href="#多集群横向扩容" class="headerlink" title="多集群横向扩容"></a>多集群横向扩容</h3><p>假设你是个妹子，你的需求越来越高导致一个男朋友集群已经处理不了了，于是乎你又新增了另外几个，这叫多集群横向扩容，简称multi-cluster grid。</p>
<h3 id="纵向扩容"><a href="#纵向扩容" class="headerlink" title="纵向扩容"></a>纵向扩容</h3><p>假设你是个妹子，你的男朋友身体瘦弱从而无法满足需求，于是乎你买了很多大补产品帮你男朋友升级，从而提高单机容量，这叫纵向扩容，Scale up。切记，纵向扩容的成本会越来越高而效果越来越不明显。</p>
<h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>假设你是个妹子，你跟男友经常出去游玩，情到深处想做点什么的时候却苦于没有tt，要去超市购买，于是乎你在你们经常去的地方都放置了tt，从而大幅度降低等待时间，这叫CDN。</p>
<h3 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h3><p>假设你是个妹子,你的男朋友英俊潇洒风流倜傥财大气粗对你唯一,于是乎你遭到了女性B的敌视，B会以朋友名义在周末请求你男朋友修电脑,修冰箱,占用男朋友大量时间,造成男朋友无法为你服务,这叫拒绝服务攻击,简称DOS。</p>
<h3 id="DDOS"><a href="#DDOS" class="headerlink" title="DDOS"></a>DDOS</h3><p>假设你是个妹子,你因男朋友被一位女性敌视,但是你男朋友的处理能力十分强大,处理速度已经高于她的请求速度,于是她雇佣了一票女性来轮流麻烦你的男朋友,这叫分布式拒绝服务攻击,简称DDOS。</p>
<h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>假设你是个妹子，你发现男朋友总是在处理一些无关紧要的其它请求，于是乎你给男朋友了一个白名单,要求他只处理白名单内的请求，而拒绝其它身份不明的人的要求,这叫访问控制。</p>
<h3 id="入侵检测系统"><a href="#入侵检测系统" class="headerlink" title="入侵检测系统"></a>入侵检测系统</h3><p>假设你是个妹子，你男朋友风流倜傥，你总担心他出轨，于是你在他身上安装了一个窃听器，里面内置了一些可疑女生勾搭行为的特征库，只要出现疑似被勾搭的情况，就会立刻向你报警，这叫入侵检测系统（IDS）。</p>
<h3 id="入侵防御系统"><a href="#入侵防御系统" class="headerlink" title="入侵防御系统"></a>入侵防御系统</h3><p>假设你是个妹子，你改良了上面的窃听器，当可疑女性对你男朋友做出勾搭行为的时候，立刻释放1万伏电压，把可疑人击昏，终止这次勾搭。这叫入侵防御系统（IPS）。</p>
<h3 id="SOC"><a href="#SOC" class="headerlink" title="SOC"></a>SOC</h3><p>假设你是个妹子，虽然你装了各种窃听器、报警器，可是你蓝朋友处处留情，报警器响个不停，让你应接不暇，疲于奔命，于是你搞了个装置集中收集这些出轨告警，进行综合分析，生成你男朋友的出轨报告。这叫SIEM或者SOC。</p>
<h3 id="等级保护"><a href="#等级保护" class="headerlink" title="等级保护"></a>等级保护</h3><p>假设你是个妹子，你把男朋友的出轨报告提交给他父母，得到了他们的大力支持，男友父母开始对他严加管教、限期整改，为你们的爱情保驾护航，做到合情合理、合法合规，这叫等级保护。</p>
<h3 id="SDWAN"><a href="#SDWAN" class="headerlink" title="SDWAN"></a>SDWAN</h3><p>假设你是个妹子，你离男朋友家有点远，你开车去，这叫自建专线，你打车过去，这叫租用专线，你骑摩拜单车过去，这叫SDWAN。</p>
<h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h3><p>假设你是个妹子，你和男朋友的恋爱遭到了双方家长的反对，不准双方往来，你们偷偷挖了一条隧道，便于进行幽会，这叫VPN。</p>
<h3 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h3><p>假设你是个妹子，你的男朋友太优秀而造人窥视，于是乎它们研究了一下你的男朋友，稍微修改了一点点生产出一个男朋友B，与你的男朋友百分制99相似，这不叫剽窃，这叫逆向工程,比如男朋友外挂。</p>
<h3 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h3><p>假设你是个妹子，你要求你的男朋友坚持十分钟，然后十五分钟继而二十分钟，以测试你男朋友的极限在哪里，这叫压力测试。</p>
<h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><p>假设你是个妹子，为了保证你男朋友的正常运行，于是乎你每天查看他的微信微博等社交资料来寻找可能产生问题的线索，这叫数据分析。</p>
<h3 id="并行计算"><a href="#并行计算" class="headerlink" title="并行计算"></a>并行计算</h3><p>假设你是个妹子，你的男朋友属于社交活跃选手，每天的微博知乎微信生产了大量信息，你发现自己的分析速度远远低于他生的速度，于是乎你找来你的闺蜜一起分析，这叫并行计算。</p>
<h3 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h3><p>假设你是个妹子，你的男朋友太能折腾处处留情产生了天量的待处理信息，你和你的闺蜜们已经累趴也没赶上他创造的速度，于是你付费在知乎上找了20个小伙伴帮你一起分析，这叫云计算。</p>
<h3 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h3><p>假设你是个妹子，你在得到男朋友经常出没的地点后，根据酒店，敏感时间段等信息确定男朋友因该是出轨了，这叫数据挖掘。</p>
<h3 id="精准推送"><a href="#精准推送" class="headerlink" title="精准推送"></a>精准推送</h3><p>假设你是个妹子，在分析男友的数据后，得知他下午又要出去开房，于是乎你在他准备出门前给他发了个短信，问他有没有带tt，没有的话可以在我这里买，这叫精准推送，需要配合数据挖掘。</p>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>假如你是个妹子，你的男朋友总该出去浪而各种出问题，于是乎你租了间屋子并准备好了所有需要的东西并告诉他，以后不用找酒店了，直接来我这屋子吧，什么都准备好了，这叫容器。</p>
<h3 id="大数据脱敏和大数据变现"><a href="#大数据脱敏和大数据变现" class="headerlink" title="大数据脱敏和大数据变现"></a>大数据脱敏和大数据变现</h3><p>假如你是个妹子，你决定从不同的男友身上采集数据，你就是大数据中心。有一天你决定生一个宝宝，这叫大数据应用。宝宝生下来不知道是谁的，这叫大数据脱敏。但是从宝宝外观来看，黑色皮肤金色头发，这叫数据融合跨域建模。你决定把这个宝宝拿来展览收点门票，这叫大数据变现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>term</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS文件夹名称实现本地化方法</title>
    <url>/2020/11/06/os/MacOS%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D%E7%A7%B0%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="方法步骤"><a href="#方法步骤" class="headerlink" title="方法步骤"></a>方法步骤</h3><h4 id="1、关闭SIP"><a href="#1、关闭SIP" class="headerlink" title="1、关闭SIP"></a>1、关闭SIP</h4><blockquote>
<p>打开终端，输入csrutil status命令，查看SIP是否打开。如果显示：<br><code>System Integrity Protection status: disabled.</code><br>证明SIP已经关闭，可以跳过这一步。</p>
</blockquote>
<blockquote>
<p>如果SIP没有关闭，执行以下操作关闭：重启系统，按住Command (⌘)-R进入苹果的恢复系统<br>进入系统后，在顶部菜单栏选怎“实用工具”，打开“终端”程序，输入<code>csrutil disable</code>，完成后重启系统<br>如果是Catalina系统，需要再多执行一个命令<code>sudo mount -uw /</code>，重新挂载一下硬盘执行命令</p>
</blockquote>
<h4 id="2、如果关闭SIP的时候就重新挂载了硬盘，应该就不用再执行了"><a href="#2、如果关闭SIP的时候就重新挂载了硬盘，应该就不用再执行了" class="headerlink" title="2、如果关闭SIP的时候就重新挂载了硬盘，应该就不用再执行了"></a>2、如果关闭SIP的时候就重新挂载了硬盘，应该就不用再执行了</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount -uw /</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /System/Library/CoreServices/SystemFolderLocalizations/zh_CN.lproj</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有权限的话就执行</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> -R 777 *</span><br><span class="line"><span class="built_in">sudo</span> /usr/libexec/PlistBuddy -c <span class="string">&quot;Add &#x27;Projects&#x27; string &#x27;项目&#x27;&quot;</span> SystemFolderLocalizations.strings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /System/Library/CoreServices/SystemFolderLocalizations/en.lproj</span><br><span class="line"><span class="comment"># 如果没有权限的话就执行</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> -R 777 *</span><br><span class="line"><span class="built_in">sudo</span> /usr/libexec/PlistBuddy -c <span class="string">&quot;Add &#x27;Projects&#x27; string &#x27;Projects&#x27;&quot;</span> SystemFolderLocalizations.strings </span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/Projects</span><br><span class="line"><span class="built_in">touch</span> .localized</span><br><span class="line">pkill Finder</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行完上述命令后，就能看到效果，如果还不行就重启下系统试试。<br>关键点应该是对en.lproj目录下的SystemFolderLocalizations.strings文件操作，网上很多教程都是缺少了这一步。</p>
</blockquote>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>update与upgrade的作用及区别</title>
    <url>/2020/10/25/os/update%E4%B8%8Eupgrade%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>个LINUX的发行版，比如UBUNTU，都会维护一个自己的软件仓库，我们常用的几乎所有软件都在这里面。这里面的软件绝对安全，而且绝对的能正常安装。</p>
<p>在UBUNTU下，我们维护一个源列表，源列表里面都是一些网址信息，这每一条网址就是一个源，这个地址指向的数据标识着这台源服务器上有哪些软件可以安装使用。</p>
<p>编辑源命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>在这个文件里加入或者注释（加#）掉一些源后，保存。这时候，我们的源列表里指向的软件就会增加或减少一部分。</p>
<p>获得最近的软件包的列表:(列表中包含一些包的信息，比如这个包是否更新过)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>
<p>这个命令，会访问源列表里的每个网址，并读取软件列表，然后保存在本地电脑。软件包管理器里看到的软件列表，都是通过update命令更新的。</p>
<p>update后，可能需要upgrade一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get upgrade</span><br></pre></td></tr></table></figure>
<p>这个命令，会把本地已安装的软件，与刚下载的软件列表里对应软件进行对比，如果发现已安装的软件版本太低，就会提示你更新。如果你的软件都是最新版本，会提示：</p>
<p>升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 0 个软件包未被升级。</p>
<p>总而言之，update是更新软件列表，upgrade是更新软件。</p>
<p>注解：一般在执行 sudo apt-get upgrade 命令之前需要先执行一下 <code>sudo apt-get update </code>—-其实和windows下的软件检测更新是一样的，需要更新的会帮你自动更新并安装好</p>
<p>在线直接安装的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install 软件名称</span><br></pre></td></tr></table></figure>
<p><code>apt-get update</code> 指令会同步使用者端和APT 伺服器的RPM 索引清单（package list），APT 伺服器的RPM 索引清单置于base 资料夹内，使用者端电脑取得base 资料夹内的bz2 RPM 索引清单压缩档后，会将其解压置放于<code>/var/state/apt/lists/</code>，而使用者使用<code>apt-get install</code> 或<code>apt-get dist-upgrade</code> 指令的时候，就会将这个资料夹内的资料和使用者端电脑内的RPM 资料库比对，如此一来就可以知道那些RPM 已安装、未安装、或是可以升级的。</p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关闭Mac系统的SIP</title>
    <url>/2020/10/29/os/%E5%85%B3%E9%97%ADMac%E7%B3%BB%E7%BB%9F%E7%9A%84SIP/</url>
    <content><![CDATA[<h3 id="如何查看SIP状态"><a href="#如何查看SIP状态" class="headerlink" title="如何查看SIP状态"></a>如何查看SIP状态</h3><p>在终端中输入csrutil status，就可以看到是enabled还是disabled。（只要显示 disabled 说明已经禁用SIP）<img src="/2020/10/29/os/%E5%85%B3%E9%97%ADMac%E7%B3%BB%E7%BB%9F%E7%9A%84SIP/4fdba006ly1g23a3jwla4j211w0qiqbb-768x537.jpg" alt="4fdba006ly1g23a3jwla4j211w0qiqbb-768x537"></p>
<h3 id="如何关闭SIP"><a href="#如何关闭SIP" class="headerlink" title="如何关闭SIP"></a>如何关闭SIP</h3><ol>
<li>重启你的Mac，当听到第一声响后（或者说在开机的时候），按住 Command + R键，按住不动，稍待片刻，电脑会进入到恢复模式。</li>
</ol>
<p><img src="/2020/10/29/os/%E5%85%B3%E9%97%ADMac%E7%B3%BB%E7%BB%9F%E7%9A%84SIP/4fdba006ly1g23a1ikskcj20lc0sgadu.jpg" alt="4fdba006ly1g23a1ikskcj20lc0sgadu"></p>
<ol start="2">
<li>进入后打开顶部实用工具–终端</li>
</ol>
<p><img src="/2020/10/29/os/%E5%85%B3%E9%97%ADMac%E7%B3%BB%E7%BB%9F%E7%9A%84SIP/4fdba006ly1g23cb0k7zyj20of0g6q8x.jpg" alt="4fdba006ly1g23cb0k7zyj20of0g6q8x"></p>
<ol start="3">
<li><p>输入命令csrutil disable关闭SIP。 (同样的步骤输入命令csrutil enable，即可重新打开SIP)</p>
<p><img src="/2020/10/29/os/%E5%85%B3%E9%97%ADMac%E7%B3%BB%E7%BB%9F%E7%9A%84SIP/4fdba006ly1g23cdo22wvj20ko0d7wgy.jpg" alt="4fdba006ly1g23cdo22wvj20ko0d7wgy"></p>
</li>
<li><p>关闭重启进入系统即可;</p>
</li>
</ol>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在国内快速安装brew</title>
    <url>/2021/12/07/os/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%9B%BD%E5%86%85%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85brew/</url>
    <content><![CDATA[<h1 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h1><h2 id="Homebrew-是什么"><a href="#Homebrew-是什么" class="headerlink" title="Homebrew 是什么"></a>Homebrew 是什么</h2><p>Homebrew是 mac的包管理器，仅需执行相应的命令,就能下载安装需要的软件包，可以省掉自己去下载、解压、拖拽(安装)等繁琐的步骤。 比如安装服务器 nginx，打开终端执行以下命令即可安装:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure>
<h2 id="Homebrew-怎么安装"><a href="#Homebrew-怎么安装" class="headerlink" title="Homebrew 怎么安装"></a>Homebrew 怎么安装</h2><h3 id="方法一：brew官网的安装脚本"><a href="#方法一：brew官网的安装脚本" class="headerlink" title="方法一：brew官网的安装脚本"></a>方法一：brew官网的安装脚本</h3><p>执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>这时很可能会出现一个问题: 要么下载极其龟速，要么直接出现如下提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原因：这是 <a href="http://raw.githubusercontent.com/">http://raw.githubusercontent.com</a> 访问不稳定引起的。</p>
</blockquote>
<h3 id="方法二：brew-镜像安装脚本"><a href="#方法二：brew-镜像安装脚本" class="headerlink" title="方法二：brew 镜像安装脚本"></a>方法二：brew 镜像安装脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>该脚本用了中科大镜像加速访问，仅修改仓库地址部分，不会产生安全隐患。 关于中科大所提供的 Homebrew 镜像服务 <a href="https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git">https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git</a></p>
</blockquote>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><h3 id="若出现-Error-Checksum-mismatch"><a href="#若出现-Error-Checksum-mismatch" class="headerlink" title="若出现 Error: Checksum mismatch."></a>若出现 Error: Checksum mismatch.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl: (56) LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54</span><br><span class="line">Error: Checksum mismatch.</span><br><span class="line">Expected: b065e5e3783954f3e65d8d3a6377ca51649bfcfa21b356b0dd70490f74c6bd86</span><br><span class="line">Actual: e8a348fe5d5c2b966bab84052062f0317944122dea5fdfdc84ac6d0bd513c137</span><br><span class="line">Archive: /Users/joyce/Library/Caches/Homebrew/portable-ruby-2.6.3_2.yosemite.bottle.tar.gz</span><br><span class="line">To retry an incomplete download, remove the file above.</span><br><span class="line">Error: Failed to install Homebrew Portable Ruby (and your system version is too old)!</span><br><span class="line">Failed during: /usr/local/bin/brew update --force</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里是由Homebrew目录下的portable-ruby-2.6.3_2.yosemite.bottle.tar.gz文件引起的安装中断，只需要到上面对应的路径里，删掉这个文件，重新执行安装命令即可：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="若卡在了Cloning-into…"><a href="#若卡在了Cloning-into…" class="headerlink" title="若卡在了Cloning into…"></a>若卡在了Cloning into…</h3><p><img src="evernotecid://7562F6CF-D053-4CF7-97F8-E79493437997/appyinxiangcom/7101777/ENResource/p345" alt="c5e6765c76e6d641ecc06901e7991a51.png"></p>
<blockquote>
<p>由这里的龟速可断定卡住了，立马用Control + C中断脚本，然后执行以下命令：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/&quot;</span></span><br><span class="line"><span class="built_in">mkdir</span> homebrew &amp;&amp; <span class="built_in">cd</span> homebrew</span><br><span class="line">git <span class="built_in">clone</span> git://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行后可看到：<br><img src="evernotecid://7562F6CF-D053-4CF7-97F8-E79493437997/appyinxiangcom/7101777/ENResource/p346" alt="3336e8641922b9a4e3de58501726becd.png"><br>速度立马快得飞起，一下子就能装好。<br>注：最后出现 Installation successful! 或者 Checking out files: 100% (5392/5392), done. 说明安装成功。</p>
</blockquote>
<h2 id="Homebrew安装完为何需要配置"><a href="#Homebrew安装完为何需要配置" class="headerlink" title="Homebrew安装完为何需要配置"></a>Homebrew安装完为何需要配置</h2><p>前面已经提到，Homebrew通常用来下载软件的，但它在安装软件时非常慢。为了提升安装速度，需要更改 Homebrew 的安装源，将其替换成国内镜像。</p>
<p>这里用的是由中科大负责托管维护的 Homebrew 镜像。其中，前两个为必须配置的项目，后两个可按需配置。</p>
<h3 id="1-必备设置"><a href="#1-必备设置" class="headerlink" title="1.必备设置"></a>1.必备设置</h3><blockquote>
<p>替换 brew.git：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure>
<blockquote>
<p>替换 homebrew-core.git：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure>

<h3 id="2-按需设置"><a href="#2-按需设置" class="headerlink" title="2.按需设置"></a>2.按需设置</h3><blockquote>
<p>替换 homebrew-cask.git：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br></pre></td></tr></table></figure>
<blockquote>
<p>替换homebrew-bottles：<br>首先要先区分你的mac用哪种终端工具，如果是 bash，则执行：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若是 zsh，则执行：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：Homebrew 主要由四个部分组成: brew、homebrew-core 、homebrew-cask、homebrew-bottles，它们对应的功能如下：</p>
</blockquote>
<table>
<thead>
<tr>
<th>组成</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Homebrew</td>
<td>源代码仓库</td>
</tr>
<tr>
<td>homebrew-core</td>
<td>Homebrew 核心源</td>
</tr>
<tr>
<td>homebrew-cask</td>
<td>提供macos应用和大型二进制文件的安装</td>
</tr>
<tr>
<td>homebrew-bottles</td>
<td>预编译二进制软件包</td>
</tr>
</tbody></table>
<h2 id="Homebrew-基本用法有哪些"><a href="#Homebrew-基本用法有哪些" class="headerlink" title="Homebrew 基本用法有哪些"></a>Homebrew 基本用法有哪些</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询：</span></span><br><span class="line">brew search 软件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装：</span></span><br><span class="line">brew install 软件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载：</span></span><br><span class="line">brew uninstall 软件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 Homebrew：</span></span><br><span class="line">brew update </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Homebrew 配置信息：</span></span><br><span class="line">brew config </span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：使用官方脚本同样会遇到uninstall地址无法访问问题，可以替换为下面脚本：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/uninstall)</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title>安装_windows10_store</title>
    <url>/2020/11/14/os/%E5%AE%89%E8%A3%85-windows10-store/</url>
    <content><![CDATA[<h4 id="1-运行管理员模式的powershell"><a href="#1-运行管理员模式的powershell" class="headerlink" title="1.运行管理员模式的powershell"></a>1.运行管理员模式的powershell</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd  C:\Program Files\WindowsApps\</span><br></pre></td></tr></table></figure>
<h4 id="2-查看当前路径"><a href="#2-查看当前路径" class="headerlink" title="2.查看当前路径"></a>2.查看当前路径</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure>
<h4 id="3-查看-Microsoft-WindowsStore-开头的目录"><a href="#3-查看-Microsoft-WindowsStore-开头的目录" class="headerlink" title="3.查看 Microsoft.WindowsStore 开头的目录"></a>3.查看 Microsoft.WindowsStore 开头的目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如 Microsoft.WindowsStore_11706.1002.9.0_x64__8wekyb3d8bbwe</span><br></pre></td></tr></table></figure>

<h4 id="4-然后执行如下命令"><a href="#4-然后执行如下命令" class="headerlink" title="4.然后执行如下命令"></a>4.然后执行如下命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add-appxpackage -register &quot;C:\Program Files\WindowsApps\Microsoft.WindowsStore_11706.1002.9.0_x64__8wekyb3d8bbwe\appxmanifest.xml&quot; -disabledevelopmentmode</span><br></pre></td></tr></table></figure>
<p>修复成功</p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title>将macos的python进行升级</title>
    <url>/2020/11/09/os/%E5%B0%86macos%E7%9A%84python%E8%BF%9B%E8%A1%8C%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mv /Library/Frameworks/Python.framework/Versions/3.7 /System/Library/Frameworks/Python.framework/Versions</span><br><span class="line">sudo chown -R root:wheel /System/Library/Frameworks/Python.framework/Versions/3.7</span><br><span class="line">sudo rm /System/Library/Frameworks/Python.framework/Versions/Current s</span><br><span class="line">sudo ln -s /System/Library/Frameworks/Python.framework/Versions/3.7 /System/Library/Frameworks/Python.framework/Versions/Current</span><br><span class="line">sudo rm /usr/bin/pydoc</span><br><span class="line">sudo rm /usr/bin/python</span><br><span class="line">sudo rm /usr/bin/pythonw</span><br><span class="line">sudo rm /usr/bin/python-config</span><br><span class="line">sudo ln -s /System/Library/Frameworks/Python.framework/Versions/3.7/bin/pydoc3.7 /usr/bin/pydoc </span><br><span class="line">sudo ln -s /System/Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7 /usr/bin/python </span><br><span class="line">sudo ln -s /System/Library/Frameworks/Python.framework/Versions/3.7/bin/pythonw3.7 /usr/bin/pythonw </span><br><span class="line">sudo ln -s /System/Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7m-config /usr/bin/python-config</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员应该必备的8个QuickLook插件</title>
    <url>/2020/11/02/os/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%BF%85%E5%A4%87%E7%9A%848%E4%B8%AAQuickLook%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>Quick Look是Mac的一个极为方便的功能，用户可以在不打开外部软件的情况下按下空格键快速预览文件。</p>
<blockquote>
<p>对于常见文件，例如jpg、png、gif等图片格式，doc、txt、ppt等文档格式，sketch、ps、ai等设计师常用的源文件格式，都可以直接按键盘的空格键实现即时预览，再按空格键关闭，而不用像Win系统一样用鼠标双击打开再点击关闭按钮这种复杂操作。在平时繁忙的工作中，这个功能无疑极大地提升了我们的工作效率。</p>
</blockquote>
<h2 id="Quick-Look插件安装"><a href="#Quick-Look插件安装" class="headerlink" title="Quick Look插件安装"></a>Quick Look插件安装</h2><h3 id="首先下载插件"><a href="#首先下载插件" class="headerlink" title="首先下载插件"></a>首先下载插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">链接: https://pan.baidu.com/s/18fflbWmjgTotOyX7o7Slrg</span><br><span class="line">提取码: y8xm</span><br><span class="line">这里提供了本文讲的8个插件，大家可以按照本文教程先下载WebP.qlgenerator。</span><br></pre></td></tr></table></figure>



<h3 id="移动插件到QuickLook目录"><a href="#移动插件到QuickLook目录" class="headerlink" title="移动插件到QuickLook目录"></a>移动插件到QuickLook目录</h3><p>复制路径/Library/QuickLook，打开Finder，依次选择：前往-前往文件夹-粘贴路径后回车，然后把下载的插件复制到这个目录，这时候会提示输入你的电脑密码。</p>
<p><img src="/2020/11/02/os/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%BF%85%E5%A4%87%E7%9A%848%E4%B8%AAQuickLook%E6%8F%92%E4%BB%B6/v2-cda31c11abb095a3e615d8e849c0b754_r.jpg" alt="v2-cda31c11abb095a3e615d8e849c0b754_r"></p>
<h3 id="用终端重启QuickLook"><a href="#用终端重启QuickLook" class="headerlink" title="用终端重启QuickLook"></a>用终端重启QuickLook</h3><p>打开终端（Terminal），输入qlmanage -r并回车，之后出现resetting quicklookd提示就可以。</p>
<p><img src="/2020/11/02/os/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%BF%85%E5%A4%87%E7%9A%848%E4%B8%AAQuickLook%E6%8F%92%E4%BB%B6/v2-c1ae40ee4f2a80ab23415fe62eff2b94_r.jpg" alt="v2-c1ae40ee4f2a80ab23415fe62eff2b94_r"></p>
<p>我们再看看刚才无法预览的webp图片，已经可以预览了。</p>
<p><img src="/2020/11/02/os/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%BF%85%E5%A4%87%E7%9A%848%E4%B8%AAQuickLook%E6%8F%92%E4%BB%B6/v2-e73dd73dd5de67a9a10396605a04ae7f_r.jpg" alt="v2-e73dd73dd5de67a9a10396605a04ae7f_r"></p>
<h2 id="常用插件介绍"><a href="#常用插件介绍" class="headerlink" title="常用插件介绍"></a>常用插件介绍</h2><p>到这里我们已经学会安装插件了，如果要删除也很简单，在目录中删掉对应的插件即可，只不过要再次输入密码。Mac一般视修改系统文件的操作为敏感操作，因此要进行安全确认。</p>
<p>除了刚才介绍的WebP插件之外，下面还有一些非常好用的插件会极大提升你的工作效率。</p>
<h3 id="BetterZipQL"><a href="#BetterZipQL" class="headerlink" title="BetterZipQL"></a>BetterZipQL</h3><p>这个插件建议所有人安装，真的非常好用。</p>
<p>一般我们下载的压缩文件有rar、zip、7z等格式，要想知道里面包含的内容需要解压查看。如何在不解压的情况下查看里面的内容呢？BetterZipQL插件就能办到，直接按空格键就可以看里面的内容。</p>
<p><img src="/2020/11/02/os/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%BF%85%E5%A4%87%E7%9A%848%E4%B8%AAQuickLook%E6%8F%92%E4%BB%B6/v2-e58ab7aaea6f3d82204df79b1a72b333_b.jpg" alt="v2-e58ab7aaea6f3d82204df79b1a72b333_b"></p>
<h3 id="QLImageSize"><a href="#QLImageSize" class="headerlink" title="QLImageSize"></a>QLImageSize</h3><p>又是一个所有人都必备插件。</p>
<p>默认情况下，Mac电脑对于图片格式的支持是很多的，我们直接按空格键就可以预览，很方便。但是对于很多人来说还需要看图片的尺寸和体积，Mac默认预览是不显示的。</p>
<p>当然了，我们可以在Finder中，顶部栏选择显示-显示预览，就可以在Finder窗口中调出右侧预览信息直接查看，但是会占用显示范围。也可以在Finder空白处右键-查看显示选项-勾选显示项目简介，这样可以直接在图表上显示尺寸，但图片体积大小无法显示。</p>
<p>但是我接触的很多同事，甚至是身经百战的程序员，还是先鼠标右键图片，选择显示简介，打开弹窗去查看，然后再点击关闭。本来1秒钟的操作，却要花上好几秒的时间。</p>
<p>QLImageSize就可以解决这个问题。安装后，直接空格键预览图片，顶部的名称前面会加上图片的尺寸和体积大小，非常方便。在快节奏的工作流程中，基本上1秒钟就能get到关键信息。</p>
<p><img src="/2020/11/02/os/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%BF%85%E5%A4%87%E7%9A%848%E4%B8%AAQuickLook%E6%8F%92%E4%BB%B6/v2-6ad6a9a643fef5078c9675dee5b1f0d3_b.jpg" alt="v2-6ad6a9a643fef5078c9675dee5b1f0d3_b"></p>
<p><img src="/2020/11/02/os/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%BF%85%E5%A4%87%E7%9A%848%E4%B8%AAQuickLook%E6%8F%92%E4%BB%B6/v2-a22300958e7a16d69669a777729ce583_r.jpg" alt="v2-a22300958e7a16d69669a777729ce583_r"></p>
<h3 id="PatternQuickLook"><a href="#PatternQuickLook" class="headerlink" title="PatternQuickLook"></a>PatternQuickLook</h3><p>说到.pat格式，很多人都不太清楚是个啥。但是如果你经常下载Photoshop的图案填充就知道了。.pat是Photoshop的图案填充文件，用Photoshop打开后就可以自动添加到图案叠加列表中。</p>
<p>但是在下载.pat文件后，我们是看不到它到底包含什么图案的，只能载入到PS查看。这个时候就用上PatternQuickLook这个插件了，安装后只需要按下空格键，就可以快速查看Photoshop 的.pat图案填充文件。</p>
<p><img src="/2020/11/02/os/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%BF%85%E5%A4%87%E7%9A%848%E4%B8%AAQuickLook%E6%8F%92%E4%BB%B6/v2-a4f09e056b0331d53ed80278d0203446_b.jpg" alt="v2-a4f09e056b0331d53ed80278d0203446_b"></p>
<h3 id="QLMarkdown"><a href="#QLMarkdown" class="headerlink" title="QLMarkdown"></a>QLMarkdown</h3><p>这个插件可能对大部分不写文章的设计师来说有点小众，但是对于经常写文章的设计、运营、产品、技术同学来说非常实用。</p>
<p>QLMarkdown是专门来预览.md后缀名Markdown文件的。Mac默认无法预览，安装后即可按空格键预览。</p>
<p><img src="/2020/11/02/os/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%BF%85%E5%A4%87%E7%9A%848%E4%B8%AAQuickLook%E6%8F%92%E4%BB%B6/v2-0b54f1d6592ad857c60dfa7c330b6872_b.jpg" alt="v2-0b54f1d6592ad857c60dfa7c330b6872_b"></p>
<p>那么问题来了，什么是Markdown呢？</p>
<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。很多与编辑相关的工作都使用Markdown语法来进行写作，极大地提高了编辑和发布效率。</p>
<h3 id="QLColorCode"><a href="#QLColorCode" class="headerlink" title="QLColorCode"></a>QLColorCode</h3><p>这个插件对于程序员和会代码的设计师来说非常方便，可以快速查看高亮的代码，比如js文件、php文件。</p>
<p>默认情况下空格键预览js文件后，显示的全是黑色的代码文本，这个可不符合程序员平时的阅读习惯。一般程序员用的编辑器中都会内置代码主题，把各种类别通过颜色区分开。使用QLColorCode就可以把黑白色的预览改为符合程序员口味的彩色预览，提升代码可读性。</p>
<p><img src="/2020/11/02/os/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%BF%85%E5%A4%87%E7%9A%848%E4%B8%AAQuickLook%E6%8F%92%E4%BB%B6/v2-feacfa06e3a9c50d9f84c2c32f0a3ac9_r.jpg" alt="v2-feacfa06e3a9c50d9f84c2c32f0a3ac9_r"></p>
<h3 id="QuickLookJSON"><a href="#QuickLookJSON" class="headerlink" title="QuickLookJSON"></a>QuickLookJSON</h3><p>这个插件可以快速查看JSON代码文件，并使之彩色化，和QLColorCode插件一样的道理，只是额外增加对JSON代码的支持。</p>
<p><img src="/2020/11/02/os/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%BF%85%E5%A4%87%E7%9A%848%E4%B8%AAQuickLook%E6%8F%92%E4%BB%B6/v2-31295ffd0a93128d38a6614d462dcfc6_r.jpg" alt="v2-31295ffd0a93128d38a6614d462dcfc6_r"></p>
<h3 id="QLStephen"><a href="#QLStephen" class="headerlink" title="QLStephen"></a>QLStephen</h3><p>在Mac中，有一些文本文件</p>
<p><img src="/2020/11/02/os/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%BF%85%E5%A4%87%E7%9A%848%E4%B8%AAQuickLook%E6%8F%92%E4%BB%B6/v2-31295ffd0a93128d38a6614d462dcfc6_r-5662574.jpg" alt="v2-31295ffd0a93128d38a6614d462dcfc6_r-5662574"></p>
<p>没有或者忘了后缀名，这样的话是无法预览和打开的。但是安装QLStephen插件后，就可以预览无拓展名的纯文本文件。</p>
<p><img src="/2020/11/02/os/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%BF%85%E5%A4%87%E7%9A%848%E4%B8%AAQuickLook%E6%8F%92%E4%BB%B6/v2-c5c97a1f7ecb75b18a6e89b2c084a282_r.jpg" alt="v2-c5c97a1f7ecb75b18a6e89b2c084a282_r"></p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>完美解决Mac软件意外退出的方法</title>
    <url>/2020/10/30/os/%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3Mac%E8%BD%AF%E4%BB%B6%E6%84%8F%E5%A4%96%E9%80%80%E5%87%BA%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>因为Apple苹果公司删除了TNT的证书，所以在2019年7月12日后软件都不能运行了，临时的解决办法，就是自己签名，具体往下看。</p>
<p><strong>签名：</strong></p>
<p>打开终端工具输入并执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">codesign --force --deep --sign - /Applications/name.app</span><br></pre></td></tr></table></figure>

<p>注意后面的文件路径，你可以打开访达找到应用程序，找到要签名的软件，直接拖入 终端 界面，即可自动生成路径。</p>
<p><img src="/2020/10/30/os/%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3Mac%E8%BD%AF%E4%BB%B6%E6%84%8F%E5%A4%96%E9%80%80%E5%87%BA%E7%9A%84%E6%96%B9%E6%B3%95/11438996-afcf20951f712ce2.png" alt="11438996-afcf20951f712ce2"></p>
<p><strong>如果是手动输入路径，那么，软件名称不能带有空格。</strong></p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu中安装chrome和chromedriver</title>
    <url>/2020/11/07/os/%E5%9C%A8Ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85chrome%E5%92%8Cchromedriver/</url>
    <content><![CDATA[<p><strong>下载chrome</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>
<p><strong>安装chrome</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i google-chrome*; sudo apt-get -f install</span><br><span class="line">/opt/google/chrome/chrome</span><br></pre></td></tr></table></figure>
<p><strong>下载chromedrive</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://npm.taobao.org/mirrors/chromedriver/2.41/chromedriver_linux64.zip</span><br></pre></td></tr></table></figure>
<p><strong>解压</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip chromedriver_linux64.zip</span><br></pre></td></tr></table></figure>
<p><strong>复制</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp chromedriver /usr/local/bin/</span><br></pre></td></tr></table></figure>
<p><strong>设置执行权限</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /usr/local/bin/chromedriver</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>openSSH</title>
    <url>/2021/12/07/windows/openSSH/</url>
    <content><![CDATA[<p>下载地址：<strong><a href="https://github.com/PowerShell/Win32-OpenSSH/releases">https://github.com/PowerShell/Win32-OpenSSH/releases</a></strong></p>
<p>   <img src="/2021/12/07/windows/openSSH/OpenSSH-Win32.zip.png" alt="OpenSSH-Win32.zip"></p>
<p>下载之后解压，打开cmd，进入解压目录，执行安装服务命令</p>
<p><strong>powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1</strong></p>
<p>打开防火墙过滤</p>
<p><strong>New-NetFirewallRule -Name sshd -DisplayName ‘OpenSSH Server (sshd)’ -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22</strong></p>
<p>此命令是windows 2012（含）以上的服务器使用，如果较低版本server</p>
<p><strong>netsh advfirewall firewall add rule name=sshd dir=in action=allow protocol=TCP localport=22</strong></p>
<p>启动服务：</p>
<p><strong>net start sshd</strong></p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>openSSH</tag>
      </tags>
  </entry>
</search>
